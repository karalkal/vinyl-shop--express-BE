openapi: 3.0.0
info:
  title: vinyl-shop
  description: "The app represents an API of a mock vinyl shop.  \nSome endpoints are accessible to all users (e.g. when browsing the inventory).  \n\nUsers can register and login to have access to the ordering and other functionalities (e.g. viewing other registered users' profiles) - userAuthentication middleware enables this functiuonality.  \nAdmin permissions can be generated by accessing the DB directly only in order to avoid regular users assigning themselves privileges they aren't supposed to have. Admin users can create new bands/labels/styles/users/inventory items and so on, edit and delete existing ones and basically manipulate the DB.  \n\nEach vinyl must be linked to an existing label and band (meaning these need to be created in advance).  \n\nThe ordering process works as follow:  \nAn INSERT query INTO a cart intermediary table is generated since the link between album and user is many-2-many, e.g. one user can order multiple albums, one album could be ordered by multiple users. Each cart (naming is not ideal) will have an unique ID (which we are not really interested in)  and a cart_number which will be our unique identifier as far as an actual cart containing multiple items is being implemented. When the user places an order we insert into purchases an entry related to the the given cart_no - hence we know which user has ordered what albums in an order with this cart_no."
  contact: {}
  version: '1.0'
servers:
- url: https://vynyl-shop.onrender.com/api/v1
  variables: {}
- url: http://localhost:3000/api/v1
  description: ''
  variables: {}
paths:
  /auth/register:
    post:
      tags:
      - auth
      summary: REGISTER user
      operationId: REGISTERuser
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/REGISTERuserRequest'
              - example:
                  f_name: eeee
                  l_name: eeee
                  email: ee@ee.ee
                  password: eeee
                  house_number: 55
                  street_name: Big street
                  city: London
                  country: France
                  is_admin: true
                  is_contributor: true
            example:
              f_name: eeee
              l_name: eeee
              email: ee@ee.ee
              password: eeee
              house_number: 55
              street_name: Big street
              city: London
              country: France
              is_admin: true
              is_contributor: true
        required: true
      responses:
        '200':
          description: successful operation
        '400':
          description: bad request
      deprecated: false
  /auth/login:
    post:
      tags:
      - auth
      summary: LOGIN user
      operationId: LOGINuser
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/LOGINuserRequest'
              - example:
                  email: bb@bb.bb
                  password: bbbb
            example:
              email: bb@bb.bb
              password: bbbb
        required: true
      responses:
        '200':
          description: successful operation
        '400':
          description: bad request
      deprecated: false
      security: []
  /albums:
    get:
      tags:
      - albums
      summary: GET all ALBUMS
      operationId: GETallALBUMS
      parameters: []
      responses:
        '200':
          description: successful operation
        '400':
          description: bad request
      deprecated: false
      security: []
    
    post:
      tags:
      - albums
      summary: POST ALBUM
      operationId: POSTALBUM
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/POSTALBUMREQUEST'
              - example:
                  name: to delete
                  band_name: The Pogues
                  cover: to delete
                  release_year: 1991
                  colour: black
                  price: 22
                  quantity: 1
                  label_name: Warner Music Group
            example:
              name: to delete
              band_name: The Pogues
              cover: to delete
              release_year: 1991
              colour: black
              price: 22
              quantity: 1
              label_name: Warner Music Group
        required: true
      responses:
        '200':
          description: successful operation
        '401':
          description: unauthorized
        '400':
          description: bad request
      deprecated: false
      security:
      - bearer: []
  /albums/{albumId}:
    get:
      tags:
      - albums
      summary: GET ALBUM by ID
      operationId: GETALBUMbyID
      parameters:
        - in: path
          name: albumId
          schema:
            type: string
          required: true
          description: ID of the album to get
      responses:
        '200':
          description: successful operation
        '404':
          description: not found
      deprecated: false
      security: []

    delete:
      tags:
      - albums
      summary: DELETE ALBUM by ID
      operationId: DELETEALBUMbyID
      parameters:
        - in: path
          name: albumId
          schema:
            type: string
          required: true
          description: ID of the album to delete
      responses:
        '204':
          description: successful operation
        '404':
          description: not found
        '401':
          description: unauthorized
      deprecated: false
      security:
      - bearer: []

    put:
      tags:
      - albums
      summary: UPDATE ALBUM by ID
      operationId: UPDATEALBUMbyID
      parameters:
        - in: path
          name: albumId
          schema:
            type: string
          required: true
          description: ID of the album to update
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/UPDATEALBUMbyIDRequest'
              - example:
                  name: Mort
                  band_name: Blut Aus Nord
                  cover: https://www.metal-archives.com/images/1/3/3/4/133408.jpg?5003
                  release_year: 1996
                  colour: black
                  price: 31
                  quantity: 8
                  label_name: Candlelight Records
            example:
              name: Mort
              band_name: Blut Aus Nord
              cover: https://www.metal-archives.com/images/1/3/3/4/133408.jpg?5003
              release_year: 1996
              colour: black
              price: 31
              quantity: 8
              label_name: Candlelight Records
        required: true
      responses:
        '201':
          description: successful operation
        '404':
          description: not found
        '401':
          description: unauthorized
      deprecated: false
      security:
      - bearer: []
  /bands:
    get:
      tags:
      - bands
      summary: GET all BANDS
      operationId: GETallBANDS
      parameters: []
      responses:
        '200':
          description: successful operation
      deprecated: false
      security: []
      
    post:
      tags:
      - bands
      summary: POST BAND
      operationId: POSTBAND
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/POSTBANDREQUEST'
              - example:
                  name: The Pogues
                  country: Ireland
            example:
              name: The Pogues
              country: Ireland
        required: true
      responses:
        '201':
          description: successful operation
        '401':
          description: unauthorized
        '400':
          description: bad request
      deprecated: false
      security:
      - bearer: []
  /bands/{bandId}:
    get:
      tags:
      - bands
      summary: GET band and related ALBUMS array
      operationId: GETbandandrelatedALBUMSarray
      parameters:
        - in: path
          name: bandId
          schema:
            type: string
          required: true
          description: ID of the band
      responses:
        '204':
          description: successful operation
        '404':
          description: not found
        '400':
          description: bad request
      deprecated: false
      security: []
    
    put:
      tags:
      - bands
      summary: UPDATE BAND
      operationId: UPDATEBAND
      parameters:
        - in: path
          name: bandId
          schema:
            type: string
          required: true
          description: ID of the band
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/UPDATEBANDREQUEST'
              - example:
                  name: Evoken
                  country: USA
            example:
              name: Evoken
              country: USA
        required: true
      responses:
        '201':
          description: successful operation
        '404':
          description: not found
        '401':
          description: unauthorized
        '400':
          description: bad request
      deprecated: false
      security:
      - bearer: []
    
    delete:
      tags:
      - bands
      summary: DELETE BAND
      operationId: DELETEBAND
      parameters:
        - in: path
          name: bandId
          schema:
            type: string
          required: true
          description: ID of the band
      responses:
        '204':
          description: successful operation
        '404':
          description: not found
        '401':
          description: unauthorized
      deprecated: false
      security:
      - bearer: []
  /join_genres_albums:
    get:
      tags:
      - join genre/album
      summary: GET all GENRE/ALBUM (join table)
      operationId: GETallGENRE/ALBUM(jointable)
      parameters: []
      responses:
        '200':
          description: successful operation
        '401':
          description: unauthorized
      deprecated: false
      security:
      - bearer: []
      
    post:
      tags:
      - join genre/album
      summary: POST GENRE/ALBUM relation (join table)
      operationId: POSTGENRE/ALBUMrelation(jointable)
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/POSTGENREALBUMrelationjointableRequest'
              - example:
                  albumId: 1
                  genreId: 5
            example:
              albumId: 1
              genreId: 5
        required: true
      responses:
        '201':
          description: successful operation
        '401':
          description: unauthorized
      deprecated: false
      security:
      - bearer: []
  /join_genres_albums/{genreId}/{albumId}:
    get:
      tags:
      - join genre/album
      summary: GET single GENRE/ALBUM (join table)
      operationId: GETsingleGENRE/ALBUM(jointable)
      parameters:
        - in: path
          name: genreId
          schema:
            type: string
          required: true
          description: ID of genre 
        - in: path
          name: albumId
          schema:
            type: string
          required: true
          description: ID of album
      responses:
        '200':
          description: successful operation
        '404':
          description: not found
        '401':
          description: unauthorized
        '400':
          description: bad request
      deprecated: false
      security:
      - bearer: []

    delete:
      tags:
      - join genre/album
      summary: DELETE GENRE/ALBUM (join table)
      operationId: DELETEGENRE/ALBUM(jointable)
      parameters:
        - in: path
          name: genreId
          schema:
            type: string
          required: true
          description: ID of genre 
        - in: path
          name: albumId
          schema:
            type: string
          required: true
          description: ID of album
      responses:
        '204':
          description: successful operation
        '404':
          description: not found
        '401':
          description: unauthorized
        '400':
          description: bad request
      deprecated: false
      security:
      - bearer: []
  /genres:
    get:
      tags:
      - genres
      summary: GET all GENRES
      operationId: GETallGENRES
      parameters: []
      responses:
        '200':
          description: successful operation
      deprecated: false
      security: []
      
    post:
      tags:
      - genres
      summary: POST GENRE
      operationId: POSTGENRE
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/POSTGENREREQUEST'
              - example:
                  name: Punk
            example:
              name: Punk
        required: true
      responses:
        '201':
          description: successful operation
        '401':
          description: unauthorized
        '400':
          description: bad request
      deprecated: false
      security:
      - bearer: []
  /genres/{genreId}:
    get:
      tags:
      - genres
      summary: GET GENRE and related ALBUMS array
      operationId: GETGENREandrelatedALBUMSarray
      parameters:
        - in: path
          name: genreId
          schema:
            type: string
          required: true
          description: ID of the genre
      responses:
        '200':
          description: successful operation
        '404':
          description: not found
        '400':
          description: bad request
      deprecated: false
      security: []
      
    delete:
      tags:
      - genres
      summary: DELETE genre
      operationId: DELETEgenre
      parameters:
        - in: path
          name: genreId
          schema:
            type: string
          required: true
          description: ID of the genre      
      responses:
        '204':
          description: successful operation
        '404':
          description: not found
        '400':
          description: bad request
      deprecated: false
      security:
      - bearer: []

    put:
      tags:
      - genres
      summary: UPDATE GENRE
      operationId: UPDATEGENRE
      parameters:
        - in: path
          name: genreId
          schema:
            type: string
          required: true
          description: ID of the genre   
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/UPDATEGENREREQUEST'
              - example:
                  name: Crust Punk
            example:
              name: Crust Punk
        required: true
      responses:
        '201':
          description: successful operation
        '404':
          description: not found
        '400':
          description: bad request
      deprecated: false
      security:
      - bearer: []
  /labels:
    get:
      tags:
      - labels
      summary: GET all LABELS
      operationId: GETallLABELS
      parameters: []
      responses:
        '200':
          description: successful operation
      deprecated: false
      security: []
    post:
      tags:
      - labels
      summary: POST LABEL
      operationId: POSTLABEL
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/POSTLABELREQUEST'
              - example:
                  name: Warner Music Group
            example:
              name: Warner Music Group
        required: true
      responses:
        '201':
          description: successful operation
        '401':
          description: unauthorized
        '400':
          description: bad request
      deprecated: false
      security:
      - bearer: []
  /labels/{labelId}:
    get:
      tags:
      - labels
      summary: GET LABEL and related ALBUMS array
      operationId: GETLABELandrelatedALBUMSarray
      parameters:
        - in: path
          name: labelId
          schema:
            type: string
          required: true
          description: ID of label
      responses:
        '200':
          description: successful operation
        '404':
          description: not found
        '400':
          description: bad request
      deprecated: false
      security: []

    put:
      tags:
      - labels
      summary: UPDATE LABEL
      operationId: UPDATELABEL
      parameters:
        - in: path
          name: labelId
          schema:
            type: string
          required: true
          description: ID of label
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/UPDATELABELREQUEST'
              - example:
                  name: Sub Pop
            example:
              name: Sub Pop
        required: true
      responses:
        '201':
          description: successful operation
        '404':
          description: not found
        '400':
          description: bad request
      deprecated: false
      security:
      - bearer: []
      
    delete:
      tags:
      - labels
      summary: DELETE LABEL
      operationId: DELETELABEL
      parameters:
        - in: path
          name: labelId
          schema:
            type: string
          required: true
          description: ID of label
      responses:
        '204':
          description: successful operation
        '404':
          description: not found
        '400':
          description: bad request
      deprecated: false
      security:
      - bearer: []
  /users:
    get:
      tags:
      - users
      summary: GET all USERS
      operationId: GETallUSERS
      parameters: []
      responses:
        '200':
          description: successful operation
      deprecated: false
      security:
      - bearer: []
    post:
      tags:
      - users
      summary: POST USER
      operationId: POSTUSER
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/POSTUSERREQUEST'
              - example:
                  f_name: gggg
                  l_name: gggg
                  email: ff@ff.ff
                  password: gggg
                  house_number: 55
                  street_name: Big street
                  city: London
                  country: France
                  is_admin: true
                  is_contributor: true
            example:
              f_name: gggg
              l_name: gggg
              email: ff@ff.ff
              password: gggg
              house_number: 55
              street_name: Big street
              city: London
              country: France
              is_admin: true
              is_contributor: true
        required: true
      responses:
        '200':
          description: successful operation
        '401':
          description: unauthorized
        '400':
          description: bad request
      deprecated: false
      security:
      - bearer: []
  /users/{userId}:
    get:
      tags:
      - users
      summary: GET USER by ID
      operationId: GETUSERbyID
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: ID of the user
      responses:
        '200':
          description: successful operation
        '404':
          description: not found
        '400':
          description: bad request
        '401':
          description: unauthorized
      deprecated: false
      security:
      - bearer: []
      
    put:
      tags:
      - users
      summary: UPDATE USER
      operationId: UPDATEUSER
      parameters: 
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: ID of the user
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/UPDATEUSERREQUEST'
              - example:
                  f_name: bbbb
                  l_name: bbbb
                  email: bb@bb.bb
                  password: bbbb
                  house_number: 22
                  street_name: second street
                  city: London
                  country: France
                  is_admin: true
                  is_contributor: true
            example:
              f_name: bbbb
              l_name: bbbb
              email: bb@bb.bb
              password: bbbb
              house_number: 22
              street_name: second street
              city: London
              country: France
              is_admin: true
              is_contributor: true
        required: true
      responses:
        '201':
          description: successful operation
        '404':
          description: not found
        '400':
          description: bad request
        '401':
          description: unauthorized
      deprecated: false
      security:
      - bearer: []

    delete:
      tags:
      - users
      summary: DELETE USER
      operationId: DELETEUSER
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: ID of the user
      responses:
        '204':
          description: successful operation
        '404':
          description: not found
        '400':
          description: bad request
        '401':
          description: unauthorized
      deprecated: false
      security:
      - bearer: []
  /cart/{userId}:
    get:
      tags:
      - carts
      summary: GET cart by USER ID
      operationId: GETcartbyUSERID
      parameters: 
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: ID of the cart (album-user relation)
      responses:
        '200':
          description: successful operation
        '404':
          description: not found
        '400':
          description: bad request
        '401':
          description: unauthorized
      deprecated: false
      security:
      - bearer: []
  /cart/add:
    put:
      tags:
      - carts
      summary: ADD item to cart
      operationId: ADDitemtocart
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ADDitemtocartRequest'
              - example:
                  cart_no: 2
                  album_id: 13
                  user_id: 6
            example:
              cart_no: 2
              album_id: 13
              user_id: 6
        required: true
      responses:
        '201':
          description: successful operation
        '400':
          description: bad request
        '401':
          description: unauthorized
      deprecated: false
      security:
      - bearer: []
  /cart/remove:
    delete:
      tags:
      - carts
      summary: REMOVE item from cart
      operationId: REMOVEitemfromcart
      parameters: []
      responses:
        '204':
          description: successful operation
        '404':
          description: not found
        '400':
          description: bad request
        '401':
          description: unauthorized
      deprecated: false
      security:
      - bearer: []
  /cart:
    delete:
      tags:
      - carts
      summary: EMPTY cart BY cart_no and user_id
      operationId: EMPTYcartBYcart_noanduser_id
      parameters: []
      responses:
        '204':
          description: successful operation
        '404':
          description: not found
        '400':
          description: bad request
        '401':
          description: unauthorized
      deprecated: false
      security:
      - bearer: []
  /orders:
    get:
      tags:
      - orders
      summary: GET all ORDERS
      operationId: GETallORDERS
      parameters: []
      responses:
        '200':
          description: successful operation
        '400':
          description: bad request
        '401':
          description: unauthorized
      deprecated: false
      security:
      - bearer: []
      
    post:
      tags:
      - orders
      summary: POST ORDER
      operationId: POSTORDER
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/POSTORDERREQUEST'
              - example:
                  cart_no: 2
                  user_id: 1
            example:
              cart_no: 2
              user_id: 1
        required: true
      responses:
        '201':
          description: successful operation
        '400':
          description: bad request
        '401':
          description: unauthorized
      deprecated: false
      security:
      - bearer: []
  /orders/{userId}/{orderId}:
    get:
      tags:
      - orders
      summary: GET single order by USER and ORDER IDs
      operationId: GETsingleorderbyUSERandORDERIDs
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: ID of user 
        - in: path
          name: orderId
          schema:
            type: string
          required: true
          description: ID of order
      responses:
        '200':
          description: successful operation
        '404':
          description: not found
        '400':
          description: bad request
        '401':
          description: unauthorized
      deprecated: false
      security:
      - bearer: []
  /orders/{orderId}:
    put:
      tags:
      - orders
      summary: UPDATE ORDER(fulfilled timestamp or false)
      operationId: UPDATEORDER(fulfilledtimestamporfalse)
      parameters: 
        - in: path
          name: orderId
          schema:
            type: string
          required: true
          description: ID of order
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/UPDATEORDERfulfilledtimestamporfalseRequest'
              - example:
                  id: 2
                  fulfilled_on: true
            example:
              id: 2
              fulfilled_on: true
        required: true
      responses:
        '201':
          description: successful operation
        '404':
          description: not found
        '400':
          description: bad request
        '401':
          description: unauthorized
      deprecated: false
      security:
      - bearer: []
      
    delete:
      tags:
      - orders
      summary: DELETE ORDER
      operationId: DELETEORDER
      parameters:
        - in: path
          name: orderId
          schema:
            type: string
          required: true
          description: ID of order
      responses:
        '204':
          description: successful operation
        '404':
          description: not found
        '400':
          description: bad request
        '401':
          description: unauthorized
      deprecated: false
      security:
      - bearer: []
components:
  schemas:
    REGISTERuserRequest:
      title: REGISTERuserRequest
      required:
      - f_name
      - l_name
      - email
      - password
      - house_number
      - street_name
      - city
      - country
      - is_admin
      - is_contributor
      type: object
      properties:
        f_name:
          type: string
        l_name:
          type: string
        email:
          type: string
        password:
          type: string
        house_number:
          type: integer
          format: int32
        street_name:
          type: string
        city:
          type: string
        country:
          type: string
        is_admin:
          type: boolean
        is_contributor:
          type: boolean
      example:
        f_name: eeee
        l_name: eeee
        email: ee@ee.ee
        password: eeee
        house_number: 55
        street_name: Big street
        city: London
        country: France
        is_admin: true
        is_contributor: true
    LOGINuserRequest:
      title: LOGINuserRequest
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      example:
        email: bb@bb.bb
        password: bbbb
    POSTALBUMREQUEST:
      title: POSTALBUMREQUEST
      required:
      - name
      - band_name
      - cover
      - release_year
      - colour
      - price
      - quantity
      - label_name
      type: object
      properties:
        name:
          type: string
        band_name:
          type: string
        cover:
          type: string
        release_year:
          type: integer
          format: int32
        colour:
          type: string
        price:
          type: integer
          format: int32
        quantity:
          type: integer
          format: int32
        label_name:
          type: string
      example:
        name: to delete
        band_name: The Pogues
        cover: to delete
        release_year: 1991
        colour: black
        price: 22
        quantity: 1
        label_name: Warner Music Group
    UPDATEALBUMbyIDRequest:
      title: UPDATEALBUMbyIDRequest
      required:
      - name
      - band_name
      - cover
      - release_year
      - colour
      - price
      - quantity
      - label_name
      type: object
      properties:
        name:
          type: string
        band_name:
          type: string
        cover:
          type: string
        release_year:
          type: integer
          format: int32
        colour:
          type: string
        price:
          type: integer
          format: int32
        quantity:
          type: integer
          format: int32
        label_name:
          type: string
      example:
        name: Mort
        band_name: Blut Aus Nord
        cover: https://www.metal-archives.com/images/1/3/3/4/133408.jpg?5003
        release_year: 1996
        colour: black
        price: 31
        quantity: 8
        label_name: Candlelight Records
    POSTBANDREQUEST:
      title: POSTBANDREQUEST
      required:
      - name
      - country
      type: object
      properties:
        name:
          type: string
        country:
          type: string
      example:
        name: The Pogues
        country: Ireland
    UPDATEBANDREQUEST:
      title: UPDATEBANDREQUEST
      required:
      - name
      - country
      type: object
      properties:
        name:
          type: string
        country:
          type: string
      example:
        name: Evoken
        country: USA
    POSTGENREALBUMrelationjointableRequest:
      title: POSTGENREALBUMrelationjointableRequest
      required:
      - albumId
      - genreId
      type: object
      properties:
        albumId:
          type: integer
          format: int32
        genreId:
          type: integer
          format: int32
      example:
        albumId: 1
        genreId: 5
    POSTGENREREQUEST:
      title: POSTGENREREQUEST
      required:
      - name
      type: object
      properties:
        name:
          type: string
      example:
        name: Punk
    UPDATEGENREREQUEST:
      title: UPDATEGENREREQUEST
      required:
      - name
      type: object
      properties:
        name:
          type: string
      example:
        name: Crust Punk
    POSTLABELREQUEST:
      title: POSTLABELREQUEST
      required:
      - name
      type: object
      properties:
        name:
          type: string
      example:
        name: Warner Music Group
    UPDATELABELREQUEST:
      title: UPDATELABELREQUEST
      required:
      - name
      type: object
      properties:
        name:
          type: string
      example:
        name: Sub Pop
    POSTUSERREQUEST:
      title: POSTUSERREQUEST
      required:
      - f_name
      - l_name
      - email
      - password
      - house_number
      - street_name
      - city
      - country
      - is_admin
      - is_contributor
      type: object
      properties:
        f_name:
          type: string
        l_name:
          type: string
        email:
          type: string
        password:
          type: string
        house_number:
          type: integer
          format: int32
        street_name:
          type: string
        city:
          type: string
        country:
          type: string
        is_admin:
          type: boolean
        is_contributor:
          type: boolean
      example:
        f_name: gggg
        l_name: gggg
        email: ff@ff.ff
        password: gggg
        house_number: 55
        street_name: Big street
        city: London
        country: France
        is_admin: true
        is_contributor: true
    UPDATEUSERREQUEST:
      title: UPDATEUSERREQUEST
      required:
      - f_name
      - l_name
      - email
      - password
      - house_number
      - street_name
      - city
      - country
      - is_admin
      - is_contributor
      type: object
      properties:
        f_name:
          type: string
        l_name:
          type: string
        email:
          type: string
        password:
          type: string
        house_number:
          type: integer
          format: int32
        street_name:
          type: string
        city:
          type: string
        country:
          type: string
        is_admin:
          type: boolean
        is_contributor:
          type: boolean
      example:
        f_name: bbbb
        l_name: bbbb
        email: bb@bb.bb
        password: bbbb
        house_number: 22
        street_name: second street
        city: London
        country: France
        is_admin: true
        is_contributor: true
    ADDitemtocartRequest:
      title: ADDitemtocartRequest
      required:
      - cart_no
      - album_id
      - user_id
      type: object
      properties:
        cart_no:
          type: integer
          format: int32
        album_id:
          type: integer
          format: int32
        user_id:
          type: integer
          format: int32
      example:
        cart_no: 2
        album_id: 13
        user_id: 6
    REMOVEitemfromcartRequest:
      title: REMOVEitemfromcartRequest
      required:
      - id
      - user_id
      type: object
      properties:
        id:
          type: integer
          format: int32
        user_id:
          type: integer
          format: int32
      example:
        id: 53
        user_id: 6
    EMPTYcartBYcart_noanduser_idRequest:
      title: EMPTYcartBYcart_noanduser_idRequest
      required:
      - cart_no
      - user_id
      type: object
      properties:
        cart_no:
          type: integer
          format: int32
        user_id:
          type: integer
          format: int32
      example:
        cart_no: 1
        user_id: 6
    POSTORDERREQUEST:
      title: POSTORDERREQUEST
      required:
      - cart_no
      - user_id
      type: object
      properties:
        cart_no:
          type: integer
          format: int32
        user_id:
          type: integer
          format: int32
      example:
        cart_no: 2
        user_id: 1
    UPDATEORDERfulfilledtimestamporfalseRequest:
      title: UPDATEORDERfulfilledtimestamporfalseRequest
      required:
      - id
      - fulfilled_on
      type: object
      properties:
        id:
          type: integer
          format: int32
        fulfilled_on:
          type: boolean
      example:
        id: 2
        fulfilled_on: true
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
security: []
tags:
- name: auth
- name: albums
- name: bands
- name: join genre/album
- name: genres
- name: labels
- name: users
- name: carts
- name: orders
